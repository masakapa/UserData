<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>public extension Array where Element == Dictionary&lt;String, Any&gt; {
    func toJSONStr(prettyPrint: Bool = false) -&gt; String? {
        if JSONSerialization.isValidJSONObject(self) {
            do {
                let jsonData: Data
                if prettyPrint {
                    jsonData = try JSONSerialization.data(withJSONObject: self, options: [.prettyPrinted])
                } else {
                    jsonData = try JSONSerialization.data(withJSONObject: self, options: [])
                }
                return String(data: jsonData, encoding: .utf8)
            } catch let error {
                print(error)
            }
        } else {
            print("\(self) is not a valid JSON Object")
        }
        return nil
    }
}

public extension Dictionary {
    func toJSONStr(prettify: Bool = false) -&gt; String? {
        guard JSONSerialization.isValidJSONObject(self) else { return nil }
        let options = (prettify == true) ? JSONSerialization.WritingOptions.prettyPrinted : JSONSerialization.WritingOptions()
        guard let jsonData = try? JSONSerialization.data(withJSONObject: self, options: options) else { return nil }
        return String(data: jsonData, encoding: .utf8)
    }
}

public extension String {
    
    // JSONString转换为字典
    func jsonToDict() -&gt; [String : Any]? {
        guard let jsonData: Data = self.data(using: .utf8) else {
            return nil
        }
        guard let dict = try? JSONSerialization.jsonObject(with: jsonData, options: .mutableContainers) as? [String : Any] else {
            return nil
        }
        return dict
    }
    
    /// JSONString 转换为数组
    func jsonToArray() -&gt; [Any]? {
        guard let jsonData: Data = self.data(using: .utf8) else {
            return nil
        }
        guard let array = try? JSONSerialization.jsonObject(with: jsonData, options: .mutableContainers) as? [Any] else {
            return nil
        }
        return array
    }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>4602F893-6762-4A79-8AA5-FA4AEA7BAF59</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift json 和 集合互转</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
